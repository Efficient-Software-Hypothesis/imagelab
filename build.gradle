/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Apply the jacoco plugin to add support for junit code coverage analysis
    id 'jacoco'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // JUnit compile dependencies
    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
}

// Add source code directories
sourceSets {
    main {
        java {
            srcDirs('imagelab','filters','sound',"${project.projectDir}")
        }
    }
}

application {
    // Define the main class for the application
    mainClassName = 'Run'
}

// Define jacoco version to be used
jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/reports/jacoco")
    applyTo run
}

// Define file type for structured reports
jacocoTestReport {
    reports{
        xml.enabled false
        csv.enabled false
        html.destination file("$buildDir/reports/jacoco")
    }
}

// Define coverage pass/fail rules for unit tests
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.85
            }
        }
    }
} 

/* moveClassFilesToRootDirs will move all compiled 
** .class files to their corresponding root directory.
** Moving the files to their corresponding root
** directory is necessary for mimicking BlueJ's 
** convention as the project is designed to search 
** the root directories for .class files. 
*/
task moveClassFilesToRootDirs {
    task copyFilterClassFiles(type: Copy) {
        from ('build/classes/java/main/filters')
        into 'filters/'
    }
    task copyImagelabClassFiles(type: Copy) {
        from ('build/classes/java/main/imagelab')
        into 'imagelab/'
    }
    task copySoundClassFiles(type: Copy) {
        from ('build/classes/java/main/sound')
        into 'sound/'
    }
    task copyRunClassFile(type: Copy) {
        from ('build/classes/java/main')
        into "${project.projectDir}"
    }
    task copyImageLabJarFile(type: Copy) {
        from ('build/libs')
        into "${project.projectDir}"
    }
    task removeBuildClassesDir(type: Delete) {
        delete 'build/classes'
    }
    task removeBuildLibsDir(type: Delete) {
        delete 'build/libs'
    }
}
// List the tasks to be executed within moveClassFilesToRootDirs task
moveClassFilesToRootDirs.dependsOn copyFilterClassFiles, copyImagelabClassFiles, 
copySoundClassFiles, copyRunClassFile, copyImageLabJarFile
moveClassFilesToRootDirs.finalizedBy removeBuildClassesDir, removeBuildLibsDir

run.dependsOn copyFilterClassFiles
build.finalizedBy moveClassFilesToRootDirs


// remove all *.class files from filters, imagelab, sound
task removeClassFilesFromRootDirs {
    delete fileTree("filters").matching {
        include "*.class"
    }
    delete fileTree("imagelab").matching {
        include "*.class"
    }
    delete fileTree("sound").matching {
        include "*.class"
    }
    delete fileTree("${project.projectDir}").matching {
        include "Run.class"
    }
}
clean.finalizedBy removeClassFilesFromRootDirs
